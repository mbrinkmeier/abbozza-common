/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.uos.inf.did.abbozza.core;

import de.uos.inf.did.abbozza.tools.GUITool;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author mbrinkmeier
 */
public class AbbozzaSplashScreen extends javax.swing.JDialog implements Runnable, MouseListener, MouseMotionListener {

    private static Thread splashThread;
    private static AbbozzaSplashScreen splashScreen;
    private ImageIcon splashImage;
    private Point dragPoint;
    
    /**
     * Creates new form AbbozzaSplashScreen
     * 
     * @param image The name of the image for the splash screen
     */
    public AbbozzaSplashScreen(String image) {
        super((JFrame) null,false);
        splashImage = new ImageIcon(this.getClass().getClassLoader().getResource(image));
        
        initComponents();

        this.addMouseListener(this);        
        this.addMouseMotionListener(this);
        
        GUITool.centerWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        message = new javax.swing.JLabel();
        image = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(320, 200));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        message.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(message);
        message.setBounds(0, 170, 320, 30);

        image.setBackground(new java.awt.Color(255, 255, 255));
        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setIcon(splashImage);
        getContentPane().add(image);
        image.setBounds(0, 0, 320, 200);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This operation shows a splash screen with the given image as background.
     * 
     * @param image The image
     */
    public static void showSplashScreen(String image) {
        splashScreen = new AbbozzaSplashScreen(image);
        splashThread = new Thread(splashScreen);
        splashThread.start();
    }

    public static void hideSplashScreen() {
        if ( splashThread  == null ) return;
        splashThread.interrupt();
        splashScreen.setVisible(false);
    }

    public static void setText(String text) {
        if (splashScreen != null) {
            splashScreen.message.setText(text);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel image;
    private javax.swing.JLabel message;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        if (splashScreen != null) splashScreen.setVisible(true);
    }
    
    public void mousePressed(MouseEvent e) {
        if(!e.isMetaDown()){
            dragPoint.x = e.getX();
            dragPoint.y = e.getY();
        }
    }
    
    public void mouseDragged(MouseEvent e) {
        if(!e.isMetaDown()){
            Point p = this.getLocation();
            this.setLocation(p.x + e.getX() - dragPoint.x,
            p.y + e.getY() - dragPoint.y);
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }
    
}
