/**
 * @license abbozza!
 *
 * Copyright 2015 Michael Brinkmeier ( michael.brinkmeier@uni-osnabrueck.de )
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
/**
 * @fileoverview ... @author michael.brinkmeier@uni-osnabrueck.de (Michael
 * Brinkmeier)
 */
package de.uos.inf.did.abbozza.handler;

import de.uos.inf.did.abbozza.core.AbbozzaLocale;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author mbrinkmeier
 */
public class SaveHandlerPanel extends javax.swing.JPanel implements PropertyChangeListener {

    /**
     * Creates new form SaveHandlerPanel
     */
    public SaveHandlerPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionBox = new javax.swing.JCheckBox();
        deletableBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionPanel = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        optionBox.setText(AbbozzaLocale.entry("gui.saveoptions"));

        deletableBox.setText(AbbozzaLocale.entry("gui.saveundeletable"));

        descriptionPanel.setColumns(20);
        descriptionPanel.setRows(5);
        jScrollPane1.setViewportView(descriptionPanel);

        jLabel1.setText(AbbozzaLocale.entry("gui.description"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(optionBox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deletableBox)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deletableBox))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox deletableBox;
    private javax.swing.JTextArea descriptionPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox optionBox;
    // End of variables declaration//GEN-END:variables

    public void setOptionSelected(boolean flag) {
        this.optionBox.setSelected(flag);
    }
    
    public boolean isOptionSelected() {
        return this.optionBox.isSelected();
    }

    public void setUndeletableSelected(boolean flag) {
        this.deletableBox.setSelected(flag);
    }

    public boolean isUndeletableSelected() {
        return this.deletableBox.isSelected();        
    }
    
    public String getDescription() {
        return this.descriptionPanel.getText();
    }
    
    public void setDescription(String text) {
        this.descriptionPanel.setText(text);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
      String fileName = evt.getPropertyName();
                      
      if (JFileChooser.DIRECTORY_CHANGED_PROPERTY.equals(fileName))
      {
          this.descriptionPanel.setText("");
      }

      if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(fileName))
      {
         // Extract selected file's File object.

         File file = (File) evt.getNewValue();

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder;

          try {
              builder = factory.newDocumentBuilder();

            // Read DOM from stream
            Document xml = builder.parse(new FileInputStream(file));
            NodeList descs = xml.getElementsByTagName("description");
            if (descs.getLength() == 0 ) {
                this.descriptionPanel.setText("");
            } else {
                this.descriptionPanel.setText(descs.item(0).getTextContent());
            }
            NodeList opts = xml.getElementsByTagName("options");
            if (opts.getLength() != 0 ) {
                // this.options = opts.item(0).getTextContent();
                this.optionBox.setSelected(((Element) opts.item(0)).getAttribute("apply").equals("yes") ? true : false);
            }

            // Read DOM from stream
          } catch (Exception ex) {
              this.descriptionPanel.setText("");
          }

       }
    }
    
}
