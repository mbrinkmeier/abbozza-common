/*
 * Copyright 2019 michael.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.uos.inf.did.abbozza.monitor;

import de.uos.inf.did.abbozza.core.AbbozzaLocale;
import de.uos.inf.did.abbozza.core.AbbozzaLogger;
import de.uos.inf.did.abbozza.core.AbbozzaServer;
import de.uos.inf.did.abbozza.monitor.clacks.ClacksBytes;
import java.awt.Color;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.ListCellRenderer;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import org.java_websocket.WebSocket;

/**
 *
 * @author michael
 */
public class WebsocketPanel extends MonitorPanel implements ListDataListener, ListCellRenderer<WebSocket> {

    private final int MAXLEN = 1024 * 32;

    private AbbozzaMonitor monitor;
    private DefaultStyledDocument protocolDocument;
    
    /**
     * Creates new form WebsocketPanel
     */
    public WebsocketPanel(AbbozzaMonitor monitor) {
        this.monitor = monitor;
        
        initProtocolDocument();
        
        initComponents();
        
        Integer ports[] = new Integer[1];
        ports[0] = new Integer(AbbozzaServer.getConfig().getServerPort() + 1);
        ComboBoxModel model;
        model = new DefaultComboBoxModel<Integer>(ports);
        portBox.setModel(new DefaultComboBoxModel(ports));
        
        connectionList.setCellRenderer(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        connectionList = new javax.swing.JList<>();
        disconnectButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        portBox = new javax.swing.JComboBox<>();
        activeButton = new javax.swing.JCheckBox();
        portLabel = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        protocolArea = new javax.swing.JTextPane();
        sendField = new javax.swing.JTextField();

        setName("WebSocket Server"); // NOI18N

        connectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        connectionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                connectionListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(connectionList);

        disconnectButton.setText(AbbozzaLocale.entry("gui.disconnect"));
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        jPanel1.setName("WebSocket"); // NOI18N

        portBox.setEditable(true);
        portBox.setToolTipText("");
        portBox.setEnabled(false);

        activeButton.setText(AbbozzaLocale.entry("gui.activate_websocket"));
        activeButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                activeButtonStateChanged(evt);
            }
        });

        portLabel.setText("Port");
        portLabel.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(activeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(portLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeButton)
                    .addComponent(portBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel))
                .addGap(0, 0, 0))
        );

        sendButton.setText(AbbozzaLocale.entry("gui.send"));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        protocolArea.setDocument(protocolDocument);
        jScrollPane1.setViewportView(protocolArea);

        sendField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendField, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(sendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(disconnectButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        if ( connectionList.getSelectedValue() != null ) {
            WebSocket socket = connectionList.getSelectedValue();
            AbbozzaLogger.info("AbbozzaMonitor: Closing websocket connection to " + socket.getResourceDescriptor() );
            socket.close();
        }
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void connectionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_connectionListValueChanged
        //
    }//GEN-LAST:event_connectionListValueChanged

    private void sendFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFieldActionPerformed
        send();
    }//GEN-LAST:event_sendFieldActionPerformed

    private void activeButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_activeButtonStateChanged
      setState();
    }//GEN-LAST:event_activeButtonStateChanged

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        send();
    }//GEN-LAST:event_sendButtonActionPerformed

    @Override
    public JPopupMenu getPopUp() {
        return null;
    }

    @Override
    public void processMessage(String msg) {
    }

    @Override
    public void process(ClacksBytes bytes) {
    }

    @Override
    public void connect(AbbozzaMonitor monitor) {
    }

    @Override
    public void disconnect(AbbozzaMonitor monitor) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeButton;
    private javax.swing.JList<WebSocket> connectionList;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<Integer> portBox;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextPane protocolArea;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField sendField;
    // End of variables declaration//GEN-END:variables

    public void enableAll(boolean flag) {
        connectionList.setEnabled(flag);
        disconnectButton.setEnabled(flag);
        portBox.setEnabled(!flag);        
        portLabel.setEnabled(!flag);
        protocolArea.setEnabled(flag);
        sendButton.setEnabled(flag);
        sendField.setEnabled(flag);
    }
    
    public void setState() {
        enableAll(activeButton.isSelected());
        if ( activeButton.isSelected() ) {
            monitor.startWebSocketServer(Integer.parseInt(portBox.getSelectedItem().toString()));
            connectionList.setModel(monitor.webSocketServer);
        } else {
            connectionList.setModel( new DefaultListModel());
            monitor.stopWebSocketServer();
        }
    }    

    @Override
    public void intervalAdded(ListDataEvent e) {
        connectionList.updateUI();
    }

    @Override
    public void intervalRemoved(ListDataEvent e) {
        connectionList.updateUI();
    }

    @Override
    public void contentsChanged(ListDataEvent e) {
        connectionList.updateUI();
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends WebSocket> list, WebSocket value, int index, boolean isSelected, boolean cellHasFocus) {        
        String host = value.getRemoteSocketAddress().getAddress().getCanonicalHostName();
        host = host + ":" + value.getRemoteSocketAddress().getPort();
        JLabel label = new JLabel(host);
        
        if ( isSelected ) {
            label.setOpaque(true);
            label.setBackground(Color.LIGHT_GRAY);
        }
        return label;
    }
    
        /**
     * Initialize styles for the protocol
     */
    private void initProtocolDocument() {
        protocolDocument = new DefaultStyledDocument();

        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);

        Style regular = protocolDocument.addStyle("output", def);
        StyleConstants.setBold(def, false);
        StyleConstants.setForeground(def, Color.BLACK);

        Style s = protocolDocument.addStyle("error", regular);
        StyleConstants.setItalic(s, true);
        StyleConstants.setForeground(s, Color.red);

        s = protocolDocument.addStyle("remote", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setForeground(s, Color.blue);

        s = protocolDocument.addStyle("info", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setForeground(s, Color.green);
    }
    
        /**
     * Append a text to the textfield showing the communication.
     *
     * @param update The text to be appended
     * @param style The style of the text
     */
    public synchronized void appendText(String update, String style) {

        try {
            protocolDocument.insertString(
                    protocolDocument.getLength(),
                    update,
                    protocolDocument.getStyle(style)
            );

            int len = protocolDocument.getLength();
            if (len > 2 * MAXLEN) {
                protocolDocument.remove(0, MAXLEN);
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(AbbozzaMonitor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void send() {
        String msg = sendField.getText();
        monitor.webSocketServer.process(msg);
    }

}
